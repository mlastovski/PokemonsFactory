{
    "methods": {
        "DEFAULT_ADMIN_ROLE()": {
            "stateMutability": "view",
            "code": "function DEFAULT_ADMIN_ROLE() external view returns (bytes32)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bytes32"
                }
            }
        },
        "MANIPULATOR_ROLE()": {
            "stateMutability": "view",
            "code": "function MANIPULATOR_ROLE() external view returns (bytes32)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bytes32"
                }
            },
            "details": "Role that will be able to call `mintStone` and `burnStone`."
        },
        "balanceOf(address,uint256)": {
            "stateMutability": "view",
            "code": "function balanceOf(address account, uint256 id) external view returns (uint256)",
            "inputs": {
                "account": {
                    "type": "address"
                },
                "id": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
        },
        "balanceOfBatch(address[],uint256[])": {
            "stateMutability": "view",
            "code": "function balanceOfBatch(address[] accounts, uint256[] ids) external view returns (uint256[])",
            "inputs": {
                "accounts": {
                    "type": "address[]"
                },
                "ids": {
                    "type": "uint256[]"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256[]"
                }
            },
            "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
        },
        "burnStone(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function burnStone(address from, uint256 id) external nonpayable",
            "inputs": {
                "from": {
                    "type": "address",
                    "description": "Address to burn tokens from."
                },
                "id": {
                    "type": "uint256",
                    "description": "Id of the collection."
                }
            },
            "outputs": {},
            "details": "Burn tokens from `id` collection from the address `from`."
        },
        "getRoleAdmin(bytes32)": {
            "stateMutability": "view",
            "code": "function getRoleAdmin(bytes32 role) external view returns (bytes32)",
            "inputs": {
                "role": {
                    "type": "bytes32"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bytes32"
                }
            },
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
        },
        "grantRole(bytes32,address)": {
            "stateMutability": "nonpayable",
            "code": "function grantRole(bytes32 role, address account) external nonpayable",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
        },
        "hasRole(bytes32,address)": {
            "stateMutability": "view",
            "code": "function hasRole(bytes32 role, address account) external view returns (bool)",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Returns `true` if `account` has been granted `role`."
        },
        "initialize(address)": {
            "stateMutability": "nonpayable",
            "code": "function initialize(address target) external nonpayable",
            "inputs": {
                "target": {
                    "type": "address",
                    "description": "Address to give role to."
                }
            },
            "outputs": {},
            "details": "Grants role `MANIPULATOR_ROLE` to the address `target`."
        },
        "ipfsLocation()": {
            "stateMutability": "view",
            "code": "function ipfsLocation() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "A string with the IPFS location of token assets."
        },
        "isApprovedForAll(address,address)": {
            "stateMutability": "view",
            "code": "function isApprovedForAll(address account, address operator) external view returns (bool)",
            "inputs": {
                "account": {
                    "type": "address"
                },
                "operator": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "See {IERC1155-isApprovedForAll}."
        },
        "mintStone(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function mintStone(address to, uint256 id) external nonpayable",
            "inputs": {
                "to": {
                    "type": "address",
                    "description": "Address to mint tokens to."
                },
                "id": {
                    "type": "uint256",
                    "description": "Id of the collection."
                }
            },
            "outputs": {},
            "details": "Mint tokens from `id` collection to the address `to`."
        },
        "name()": {
            "stateMutability": "view",
            "code": "function name() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "Name of the collection (assigned to correctly display on OpenSea)."
        },
        "renounceRole(bytes32,address)": {
            "stateMutability": "nonpayable",
            "code": "function renounceRole(bytes32 role, address account) external nonpayable",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
        },
        "revokeRole(bytes32,address)": {
            "stateMutability": "nonpayable",
            "code": "function revokeRole(bytes32 role, address account) external nonpayable",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
        },
        "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
            "stateMutability": "nonpayable",
            "code": "function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) external nonpayable",
            "inputs": {
                "from": {
                    "type": "address"
                },
                "to": {
                    "type": "address"
                },
                "ids": {
                    "type": "uint256[]"
                },
                "amounts": {
                    "type": "uint256[]"
                },
                "data": {
                    "type": "bytes"
                }
            },
            "outputs": {},
            "details": "See {IERC1155-safeBatchTransferFrom}."
        },
        "safeTransferFrom(address,address,uint256,uint256,bytes)": {
            "stateMutability": "nonpayable",
            "code": "function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) external nonpayable",
            "inputs": {
                "from": {
                    "type": "address"
                },
                "to": {
                    "type": "address"
                },
                "id": {
                    "type": "uint256"
                },
                "amount": {
                    "type": "uint256"
                },
                "data": {
                    "type": "bytes"
                }
            },
            "outputs": {},
            "details": "See {IERC1155-safeTransferFrom}."
        },
        "setApprovalForAll(address,bool)": {
            "stateMutability": "nonpayable",
            "code": "function setApprovalForAll(address operator, bool approved) external nonpayable",
            "inputs": {
                "operator": {
                    "type": "address"
                },
                "approved": {
                    "type": "bool"
                }
            },
            "outputs": {},
            "details": "See {IERC1155-setApprovalForAll}."
        },
        "supportsInterface(bytes4)": {
            "stateMutability": "view",
            "code": "function supportsInterface(bytes4 interfaceId) external view returns (bool)",
            "inputs": {
                "interfaceId": {
                    "type": "bytes4"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Used to resolve the conflict when inheriting from both      AccessControl and ERC1155."
        },
        "symbol()": {
            "stateMutability": "view",
            "code": "function symbol() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "Symbol of the collection (assigned to correctly display on OpenSea)."
        },
        "uri(uint256)": {
            "stateMutability": "view",
            "code": "function uri(uint256 _tokenId) external view returns (string)",
            "inputs": {
                "_tokenId": {
                    "type": "uint256",
                    "description": "Token's ID."
                }
            },
            "outputs": {
                "_0": {
                    "type": "string",
                    "description": "A string with NFT metadata. "
                }
            },
            "notice": "Sets NFT matadata (e.g. for OpenSea)."
        }
    },
    "events": {
        "ApprovalForAll": {
            "code": "event ApprovalForAll(address indexed account, address indexed operator, bool approved)",
            "inputs": {
                "account": {
                    "type": "address",
                    "indexed": true
                },
                "operator": {
                    "type": "address",
                    "indexed": true
                },
                "approved": {
                    "type": "bool",
                    "indexed": false
                }
            }
        },
        "RoleAdminChanged": {
            "code": "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
            "inputs": {
                "role": {
                    "type": "bytes32",
                    "indexed": true
                },
                "previousAdminRole": {
                    "type": "bytes32",
                    "indexed": true
                },
                "newAdminRole": {
                    "type": "bytes32",
                    "indexed": true
                }
            }
        },
        "RoleGranted": {
            "code": "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
            "inputs": {
                "role": {
                    "type": "bytes32",
                    "indexed": true
                },
                "account": {
                    "type": "address",
                    "indexed": true
                },
                "sender": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "RoleRevoked": {
            "code": "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
            "inputs": {
                "role": {
                    "type": "bytes32",
                    "indexed": true
                },
                "account": {
                    "type": "address",
                    "indexed": true
                },
                "sender": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "TransferBatch": {
            "code": "event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)",
            "inputs": {
                "operator": {
                    "type": "address",
                    "indexed": true
                },
                "from": {
                    "type": "address",
                    "indexed": true
                },
                "to": {
                    "type": "address",
                    "indexed": true
                },
                "ids": {
                    "type": "uint256[]",
                    "indexed": false
                },
                "values": {
                    "type": "uint256[]",
                    "indexed": false
                }
            }
        },
        "TransferSingle": {
            "code": "event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)",
            "inputs": {
                "operator": {
                    "type": "address",
                    "indexed": true
                },
                "from": {
                    "type": "address",
                    "indexed": true
                },
                "to": {
                    "type": "address",
                    "indexed": true
                },
                "id": {
                    "type": "uint256",
                    "indexed": false
                },
                "value": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "URI": {
            "code": "event URI(string value, uint256 indexed id)",
            "inputs": {
                "value": {
                    "type": "string",
                    "indexed": false
                },
                "id": {
                    "type": "uint256",
                    "indexed": true
                }
            }
        }
    },
    "errors": {},
    "path": "",
    "title": "An ERC-1155 compliant token for the PokemonsFactory project.",
    "author": "mlastovski",
    "name": "Stones"
}