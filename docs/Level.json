{
    "methods": {
        "DEFAULT_ADMIN_ROLE()": {
            "stateMutability": "view",
            "code": "function DEFAULT_ADMIN_ROLE() external view returns (bytes32)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bytes32"
                }
            }
        },
        "MANIPULATOR_ROLE()": {
            "stateMutability": "view",
            "code": "function MANIPULATOR_ROLE() external view returns (bytes32)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bytes32"
                }
            },
            "details": "Role that will be able to call `mintLevel` and `burnLevel`."
        },
        "allowance(address,address)": {
            "stateMutability": "view",
            "code": "function allowance(address owner, address spender) external view returns (uint256)",
            "inputs": {
                "owner": {
                    "type": "address"
                },
                "spender": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "See {IERC20-allowance}."
        },
        "approve(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function approve(address spender, uint256 amount) external nonpayable returns (bool)",
            "inputs": {
                "spender": {
                    "type": "address"
                },
                "amount": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
        },
        "balanceOf(address)": {
            "stateMutability": "view",
            "code": "function balanceOf(address account) external view returns (uint256)",
            "inputs": {
                "account": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "See {IERC20-balanceOf}."
        },
        "burnLevel(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function burnLevel(address from, uint256 amount) external nonpayable",
            "inputs": {
                "from": {
                    "type": "address",
                    "description": "Address to burn tokens from."
                },
                "amount": {
                    "type": "uint256",
                    "description": "Amount of tokens to burn."
                }
            },
            "outputs": {},
            "details": "Burn `amount` of tokens from the address `from`."
        },
        "decimals()": {
            "stateMutability": "view",
            "code": "function decimals() external view returns (uint8)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint8"
                }
            },
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
        },
        "decreaseAllowance(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function decreaseAllowance(address spender, uint256 subtractedValue) external nonpayable returns (bool)",
            "inputs": {
                "spender": {
                    "type": "address"
                },
                "subtractedValue": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
        },
        "getRoleAdmin(bytes32)": {
            "stateMutability": "view",
            "code": "function getRoleAdmin(bytes32 role) external view returns (bytes32)",
            "inputs": {
                "role": {
                    "type": "bytes32"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bytes32"
                }
            },
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
        },
        "grantRole(bytes32,address)": {
            "stateMutability": "nonpayable",
            "code": "function grantRole(bytes32 role, address account) external nonpayable",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
        },
        "hasRole(bytes32,address)": {
            "stateMutability": "view",
            "code": "function hasRole(bytes32 role, address account) external view returns (bool)",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Returns `true` if `account` has been granted `role`."
        },
        "increaseAllowance(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function increaseAllowance(address spender, uint256 addedValue) external nonpayable returns (bool)",
            "inputs": {
                "spender": {
                    "type": "address"
                },
                "addedValue": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
        },
        "initialize(address)": {
            "stateMutability": "nonpayable",
            "code": "function initialize(address target) external nonpayable",
            "inputs": {
                "target": {
                    "type": "address",
                    "description": "Address to give role to."
                }
            },
            "outputs": {},
            "details": "Grants role `MANIPULATOR_ROLE` to the address `target`."
        },
        "mintLevel(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function mintLevel(address to, uint256 amount) external nonpayable",
            "inputs": {
                "to": {
                    "type": "address",
                    "description": "Address to mint tokens to."
                },
                "amount": {
                    "type": "uint256",
                    "description": "Amount of tokens to mint."
                }
            },
            "outputs": {},
            "details": "Mint `amount` of tokens to the address `to`."
        },
        "name()": {
            "stateMutability": "view",
            "code": "function name() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "Returns the name of the token."
        },
        "renounceRole(bytes32,address)": {
            "stateMutability": "nonpayable",
            "code": "function renounceRole(bytes32 role, address account) external nonpayable",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
        },
        "revokeRole(bytes32,address)": {
            "stateMutability": "nonpayable",
            "code": "function revokeRole(bytes32 role, address account) external nonpayable",
            "inputs": {
                "role": {
                    "type": "bytes32"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {},
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
        },
        "supportsInterface(bytes4)": {
            "stateMutability": "view",
            "code": "function supportsInterface(bytes4 interfaceId) external view returns (bool)",
            "inputs": {
                "interfaceId": {
                    "type": "bytes4"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "See {IERC165-supportsInterface}."
        },
        "symbol()": {
            "stateMutability": "view",
            "code": "function symbol() external view returns (string)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "string"
                }
            },
            "details": "Returns the symbol of the token, usually a shorter version of the name."
        },
        "totalSupply()": {
            "stateMutability": "view",
            "code": "function totalSupply() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "details": "See {IERC20-totalSupply}."
        },
        "transfer(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function transfer(address to, uint256 amount) external nonpayable returns (bool)",
            "inputs": {
                "to": {
                    "type": "address"
                },
                "amount": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
        },
        "transferFrom(address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function transferFrom(address from, address to, uint256 amount) external nonpayable returns (bool)",
            "inputs": {
                "from": {
                    "type": "address"
                },
                "to": {
                    "type": "address"
                },
                "amount": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
        }
    },
    "events": {
        "Approval": {
            "code": "event Approval(address indexed owner, address indexed spender, uint256 value)",
            "inputs": {
                "owner": {
                    "type": "address",
                    "indexed": true
                },
                "spender": {
                    "type": "address",
                    "indexed": true
                },
                "value": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "RoleAdminChanged": {
            "code": "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
            "inputs": {
                "role": {
                    "type": "bytes32",
                    "indexed": true
                },
                "previousAdminRole": {
                    "type": "bytes32",
                    "indexed": true
                },
                "newAdminRole": {
                    "type": "bytes32",
                    "indexed": true
                }
            }
        },
        "RoleGranted": {
            "code": "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
            "inputs": {
                "role": {
                    "type": "bytes32",
                    "indexed": true
                },
                "account": {
                    "type": "address",
                    "indexed": true
                },
                "sender": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "RoleRevoked": {
            "code": "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
            "inputs": {
                "role": {
                    "type": "bytes32",
                    "indexed": true
                },
                "account": {
                    "type": "address",
                    "indexed": true
                },
                "sender": {
                    "type": "address",
                    "indexed": true
                }
            }
        },
        "Transfer": {
            "code": "event Transfer(address indexed from, address indexed to, uint256 value)",
            "inputs": {
                "from": {
                    "type": "address",
                    "indexed": true
                },
                "to": {
                    "type": "address",
                    "indexed": true
                },
                "value": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        }
    },
    "errors": {},
    "path": "",
    "title": "An ERC-20 compliant token for the PokemonsFactory project.",
    "author": "mlastovski",
    "name": "Level"
}